"0",""
"0","search_query <- ""Inteligencia Artificial"" # Palabra clave para obtener los artículos"
"0","from <- 0  # Seteamos en 0 para que comience por el primer artículo"
"0","total_results <- 300  # Numero de búsquedas total al ingresar la palabra clave en emol.cl"
"0","procesados <- 0"
"0","all_data_emol <- list() # Creamos lista vacía para almacenar todo el contenido (por el formato del JSON no se puede utilizar un data frame)"
"0",""
"0","combine_lists <- function(...) {"
"0","  combined_list <- c(...)"
"0","  return(combined_list)"
"0","} #Creamos función para combinar listas"
"0",""
"0","## Iteramos hasta que el from sea menor al total de resultados"
"0","while (from < total_results) {"
"0","  # Construimos el link para cada iteración (lo más importante es que el from vaya aumentando)"
"0","  url <- paste0("
"0","    ""https://newsapi.ecn.cl/NewsApi/emol/buscador/emol,inversiones,mediosregionales,legal,campo,blogs,guioteca,elmercurio-digital,emoltv,lasegundaprint,revistalibros,mercuriodeportes?q=inteligencia%20artificial&size=10&from="", from"
"0","  )"
"0","    from <- from + 10 # Se aumenta el from para cada iteración (después de que se construya el link)"
"0","   "
"0","    response <- tryCatch("
"0","    { GET(url) },"
"0","    error = function(e) { "
"0","      message(""Error en la conexión: "", e) "
"0","      return(NULL)"
"0","    }"
"0","  )"
"0"," if (is.null(response)) next"
"0","    "
"0","    data1 <- content(response, ""text"", encoding = ""UTF-8"") # Transformamos el cuerpo de ""response"" en texto en formato UTF-8 "
"0","    json_data1 <- fromJSON(data1, flatten = FALSE) #Convertimos el JSON en una lista leíble en R"
"0","    data2 <- list(c(json_data1[[""hits""]][[""hits""]][[""_source""]][[""texto""]])) "
"0","    "
"0","      all_data_emol <- combine_lists(all_data_emol, data2) # Fucionamos todas las listas"
"0","          procesados <- procesados +10 # Contador"
"0","          print(procesados)"
"0","}"
"1","[1]"
"1"," 10"
"1","
"
"1","[1]"
"1"," 20"
"1","
"
"1","[1]"
"1"," 30"
"1","
"
"1","[1]"
"1"," 40"
"1","
"
"1","[1]"
"1"," 50"
"1","
"
"1","[1]"
"1"," 60"
"1","
"
"1","[1]"
"1"," 70"
"1","
"
"1","[1]"
"1"," 80"
"1","
"
"1","[1]"
"1"," 90"
"1","
"
"1","[1]"
"1"," 100"
"1","
"
"1","[1]"
"1"," 110"
"1","
"
"1","[1]"
"1"," 120"
"1","
"
"1","[1]"
"1"," 130"
"1","
"
"1","[1]"
"1"," 140"
"1","
"
"1","[1]"
"1"," 150"
"1","
"
"1","[1]"
"1"," 160"
"1","
"
"1","[1]"
"1"," 170"
"1","
"
"1","[1]"
"1"," 180"
"1","
"
"1","[1]"
"1"," 190"
"1","
"
"1","[1]"
"1"," 200"
"1","
"
"1","[1]"
"1"," 210"
"1","
"
"1","[1]"
"1"," 220"
"1","
"
"1","[1]"
"1"," 230"
"1","
"
"1","[1]"
"1"," 240"
"1","
"
"1","[1]"
"1"," 250"
"1","
"
"1","[1]"
"1"," 260"
"1","
"
"1","[1]"
"1"," 270"
"1","
"
"1","[1]"
"1"," 280"
"1","
"
"1","[1]"
"1"," 290"
"1","
"
"1","[1]"
"1"," 300"
"1","
"
"0","textos_df <- tibble(texto = unlist(all_data_emol)) #Convertimos la lista en data frame"
