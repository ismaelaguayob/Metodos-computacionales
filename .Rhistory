# Agrega los links válidos y elimina NAs
all_links <- c(all_links, na.omit(page_links))
# Muestra el progreso
cat("Procesados", length(all_links), "resultados\n")
} else {
cat("No se encontraron más notas en esta página.\n")
}
# Actualiza el total de resultados si es necesario
if (!is.null(json_data$total)) {
total_results <- as.numeric(json_data$total)
}
# Aumenta el offset para la próxima página
offset <- offset + 20
} else {
cat("Error en la solicitud: código de estado", status_code(response), "\n")
}
}
View(json_data)
View(json_data[["notas"]])
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)   offset <- offset + 20
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query)
)   offset <- offset + 20
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query)
)
offset <- offset + 20
response <- GET(url)
if (!is.null(json_data$notas) && length(json_data$notas) > 0) {
# Filtra solo aquellos elementos que tienen `post_URL`
page_links <- sapply(json_data$notas)
}
}
rm(list = ls())
# Configura los parámetros básicos
search_query <- "inteligencia artificial"
offset <- 0  # Inicia desde el primer artículo
total_results <- Inf  # Se inicializa con un valor alto para empezar el bucle
# Encabezados para la solicitud
headers <- c(
`User-Agent` = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0",
`Accept` = "application/json, text/plain, */*",
`Referer` = "https://www.biobiochile.cl/buscador.shtml?s=inteligencia+artificial",
`Content-Type` = "application/json; charset=UTF-8"
)
# Loop para extraer todas las páginas de resultados
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
# Realiza la solicitud a la API
response <- GET(url)
# Verifica que la solicitud sea exitosa
if (status_code(response) == 200) {
# Procesa el JSON y extrae los enlaces
data <- content(response, "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Extrae las URLs de cada artículo y las añade a la lista de enlaces
if (!is.null(json_data$notas) && length(json_data$notas) > 0) {
# Filtra solo aquellos elementos que tienen `post_URL`
page_links <- sapply(json_data$notas, function(nota) {
if (!is.null(nota[["post_URL"]])) {
return(nota[["post_URL"]])
} else {
return(NA)  # Asigna NA si no tiene `post_URL`
}
})
# Agrega los links válidos y elimina NAs
all_links <- c(all_links, na.omit(page_links))
# Muestra el progreso
cat("Procesados", length(all_links), "resultados\n")
} else {
cat("No se encontraron más notas en esta página.\n")
}
# Actualiza el total de resultados si es necesario
if (!is.null(json_data$total)) {
total_results <- as.numeric(json_data$total)
}
# Aumenta el offset para la próxima página
offset <- offset + 20
} else {
cat("Error en la solicitud: código de estado", status_code(response), "\n")
}
}
View(json_data)
library(httr)
library(jsonlite)
response[["request"]][["url"]]
library(httr)
library(jsonlite)
# Configura los parámetros básicos
search_query <- "inteligencia artificial"
offset <- 0  # Inicia desde el primer artículo
all_links <- c()  # Almacena todas las URLs
total_results <- Inf  # Se inicializa con un valor alto para empezar el bucle
# Encabezados para la solicitud
headers <- c(
`User-Agent` = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0",
`Accept` = "application/json, text/plain, */*",
`Referer` = "https://www.biobiochile.cl/buscador.shtml?s=inteligencia+artificial",
`Content-Type` = "application/json; charset=UTF-8"
)
# Loop para extraer todas las páginas de resultados
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
# Aumenta el offset para la próxima página
offset <- offset + 20
# Realiza la solicitud a la API
response <- GET(url)
# Procesa el JSON y extrae los enlaces
data <- content(response, "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Extrae las URLs de cada artículo y las añade a la lista de enlaces
if (!is.null(json_data$notas) && length(json_data$notas) > 0) {
# Filtra solo aquellos elementos que tienen `post_URL`
page_links <- sapply(json_data$notas, function(nota) {
if (!is.null(nota[["post_URL"]])) {
return(nota[["post_URL"]])
} else {
return(NA)  # Asigna NA si no tiene `post_URL`
}
})
# Agrega los links válidos y elimina NAs
all_links <- c(all_links, na.omit(page_links))
# Muestra el progreso
cat("Procesados", length(all_links), "resultados\n")
} else {
cat("No se encontraron más notas en esta página.\n")
}
# Actualiza el total de resultados si es necesario
if (!is.null(json_data$total)) {
total_results <- as.numeric(json_data$total)
}
else {
cat("Error en la solicitud: código de estado", status_code(response), "\n")
}
}
response[["request"]][["url"]]
response[["content"]]
# Loop para extraer todas las páginas de resultados
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
# Aumenta el offset para la próxima página
offset <- offset + 20
# Realiza la solicitud a la API
response <- GET(url)
# Procesa el JSON y extrae los enlaces
data <- content(response, "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Filtra solo aquellos elementos que tienen `post_URL`
data1 <- sapply(json_data[[notas$post_url]])
# Muestra el progreso
cat("Procesados", length(data1), "resultados\n")
# Actualiza el total de resultados si es necesario
}
View(json_data)
library(pacman)
p_load(
rvest,
tidyverse,
rselenium,
httr,
jsonlite,
dplyr
)
p_load(
rvest,
tidyverse,
rselenium,
httr,
jsonlite,
dplyr,
panda
)
# Loop para extraer todas las páginas de resultados
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
# Aumenta el offset para la próxima página
offset <- offset + 20
# Realiza la solicitud a la API
response <- GET(url)
data <- content(response, "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Filtra solo aquellos elementos que tienen `post_URL`
data1 <- bind_rows(json_data[[notas]])
# Muestra el progreso
cat("Procesados", length(data1), "resultados\n")
# Actualiza el total de resultados si es necesario
}
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
# Aumenta el offset para la próxima página
offset <- offset + 20
# Realiza la solicitud a la API
response <- GET(url)
data <- content(response, "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Muestra el progreso
cat("Procesados", length(data1), "resultados\n")
# Actualiza el total de resultados si es necesario
}
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
# Aumenta el offset para la próxima página
offset <- offset + 20
# Realiza la solicitud a la API
response <- GET(url)
data <- content(response, "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Muestra el progreso
cat("Procesados", length(json_data[[notas]]), "resultados\n")
# Actualiza el total de resultados si es necesario
}
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
# Aumenta el offset para la próxima página
offset <- offset + 20
# Realiza la solicitud a la API
response <- GET(url)
data <- content(response, "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Muestra el progreso
cat("Procesados", length(json_data$notas), "resultados\n")
# Actualiza el total de resultados si es necesario
}
offset <- 0  # Inicia desde el primer artículo
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
# Aumenta el offset para la próxima página
offset <- offset + 20
# Realiza la solicitud a la API
response <- GET(url)
data <- content(response, "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Muestra el progreso
cat("Procesados", print(offset), "resultados\n")
# Actualiza el total de resultados si es necesario
}
View(json_data)
View(json_data[["notas"]])
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
# Aumenta el offset para la próxima página
offset <- offset + 20
# Realiza la solicitud a la API
response <- GET(url)
data <- content(response, "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
all_data <- rbind(all_data, json_data$notas)
# Muestra el progreso
cat("Procesados", print(offset), "resultados\n")
# Actualiza el total de resultados si es necesario
}
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
# Aumenta el offset para la próxima página
offset <- offset + 20
# Realiza la solicitud a la API
response <- GET(url)
data <- content(response, "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
all_data <- rbind(all_data, json_data$notas)
# Muestra el progreso
cat("Procesados", print(offset), "resultados\n")
# Actualiza el total de resultados si es necesario
}
all_data <- data.frame()
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
# Aumenta el offset para la próxima página
offset <- offset + 20
# Realiza la solicitud a la API
response <- GET(url)
data <- content(response, "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
all_data <- rbind(all_data, json_data$notas)
# Muestra el progreso
cat("Procesados", print(offset), "resultados\n")
# Actualiza el total de resultados si es necesario
}
View(all_data)
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
# Aumenta el offset para la próxima página
offset <- offset + 20
# Realiza la solicitud a la API
response <- GET(url)
data <- content(response, "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
json_notas <- c(json_data$notas)
all_data <- rbind(all_data, json_notas)
# Muestra el progreso
cat("Procesados", print(offset), "resultados\n")
# Actualiza el total de resultados si es necesario
}
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
# Aumenta el offset para la próxima página
offset <- offset + 20
# Realiza la solicitud a la API
response <- GET(url)
data <- content(response, "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
json_notas <- c(json_data$notas)
all_data <- bind_rows(all_data, json_notas)
# Muestra el progreso
cat("Procesados", print(offset), "resultados\n")
# Actualiza el total de resultados si es necesario
}
# Configura los parámetros básicos
search_query <- "inteligencia artificial"
offset <- 0  # Inicia desde el primer artículo
all_links <- c()  # Almacena todas las URLs
total_results <- 2132  # Se inicializa con un valor alto para empezar el bucle
all_data <- data.frame()
# Encabezados para la solicitud
headers <- c(
`User-Agent` = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0",
`Accept` = "application/json, text/plain, */*",
`Referer` = "https://www.biobiochile.cl/buscador.shtml?s=inteligencia+artificial",
`Content-Type` = "application/json; charset=UTF-8"
)
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
# Aumenta el offset para la próxima página
offset <- offset + 20
# Realiza la solicitud a la API
response <- GET(url)
data <- content(response, "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
json_notas <- c(json_data$notas)
all_data <- bind_rows(all_data, json_notas)
# Muestra el progreso
cat("Procesados", print(offset), "resultados\n")
# Actualiza el total de resultados si es necesario
}
View(all_data)
library(pacman)
rm(list = ls())
library(httr)
library(httr)
library(jsonlite)
p_load(
tidyverse,
httr,
jsonlite,
dplyr
)
p_load(
tidyverse,
httr,
jsonlite,
dplyr
)
rm(list = ls())
## Parámetros básicos
search_query <- "inteligencia artificial" # Palabra clave para obtener los artículos
offset <- 0  # Seteamos en 0 para que comience por el primer artículo
total_results <- 2132  # Numero de búsquedas total al ingresar la palabra clave en bíobío.cl
all_data <- data.frame() # Creamos data.frame vacío para almacenar todo el contenido
while (offset < total_results) {
# Construye la URL de la API con los parámetros actuales
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
# Aumenta el offset para la próxima página
offset <- offset + 20
# Realiza la solicitud a la API
response <- GET(url)
data <- content(response, "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
json_notas <- c(json_data$notas)
all_data <- bind_rows(all_data, json_notas)
# Muestra el progreso
cat("Procesados", print(offset), "resultados\n")
# Actualiza el total de resultados si es necesario
}
View(all_data)
View(response)
offset <- 0  # Seteamos en 0 para que comience por el primer artículo
while (offset < total_results) {
# Construimos el link para cada iteración (lo más importante es que el offset vaya aumentando)
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
offset <- offset + 20 # Se aumenta el offset para cada iteración (después de que se construya el link)
response <- GET(url) # Realizamos la solicitud
data <- content(response, "text", encoding = "UTF-8") # Transformamos el cuerpo de "response" en texto en formato UTF-8
json_data <- fromJSON(data, flatten = TRUE) #Convertimos el JSON en una lista leíble en R
json_notas <- c(json_data$notas) # Creamos un data frame donde solo esté la información relevante
all_data <- bind_rows(all_data, json_notas)
cat("Procesados", length(all_data)) #Mostrar progreso
}
all_data <- data.frame() # Creamos data.frame vacío para almacenar todo el contenido
offset <- 0  # Seteamos en 0 para que comience por el primer artículo
while (offset < total_results) {
# Construimos el link para cada iteración (lo más importante es que el offset vaya aumentando)
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
offset <- offset + 20 # Se aumenta el offset para cada iteración (después de que se construya el link)
response <- GET(url) # Realizamos la solicitud
data <- content(response, "text", encoding = "UTF-8") # Transformamos el cuerpo de "response" en texto en formato UTF-8
json_data <- fromJSON(data, flatten = TRUE) #Convertimos el JSON en una lista leíble en R
json_notas <- c(json_data$notas) # Creamos un data frame donde solo esté la información relevante
all_data <- bind_rows(all_data, json_notas)
cat("Procesados", length(all_data)) #Mostrar progreso
}
offset <- 0  # Seteamos en 0 para que comience por el primer artículo
total_results <- 2132  # Numero de búsquedas total al ingresar la palabra clave en bíobío.cl
all_data <- data.frame() # Creamos data.frame vacío para almacenar todo el contenido
while (offset < total_results) {
# Construimos el link para cada iteración (lo más importante es que el offset vaya aumentando)
url <- paste0(
"https://www.biobiochile.cl/lista/api/buscador?offset=", offset,
"&search=", URLencode(search_query),
"&intervalo=&orden=ultimas"
)
offset <- offset + 20 # Se aumenta el offset para cada iteración (después de que se construya el link)
response <- GET(url) # Realizamos la solicitud
data <- content(response, "text", encoding = "UTF-8") # Transformamos el cuerpo de "response" en texto en formato UTF-8
json_data <- fromJSON(data, flatten = TRUE) #Convertimos el JSON en una lista leíble en R
json_notas <- c(json_data$notas) # Creamos un data frame donde solo esté la información relevante
all_data <- bind_rows(all_data, json_notas)
cat("Procesados", dim(all_data)) #Mostrar progreso
}
